# $Id$

PortSystem              1.0

name                    minivmac
conflicts               minivmac-devel
version                 3.0.4
revision                1
categories              emulators aqua
maintainers             ryandesign
license                 GPLv2
homepage                http://minivmac.sourceforge.net/
use_zip                 yes
platforms               macosx
universal_variant       no
build.target
use_parallel_build      yes

description \
    a Mac 128K, Mac 512K, Mac 512KE, Mac Plus and Mac SE emulator

long_description \
    Mini vMac is a Macintosh emulator. It emulates the earliest Macs, \
    from the original Mac 128K (built 1984-85) to the Mac SE (1987-1990). \
    The default is to emulate a Mac Plus (1986-1990)\; this is also \
    the best-tested and therefore recommended emulation.

master_sites \
    sourceforge:${name}:minivmac \
    http://download.info.apple.com/Apple_Support_Area/Apple_Software_Updates/English-North_American/Macintosh/System/Older_System/System_7.0.x/:apple

set my_src                                  ${distname}.src
set my_src_distfile                         ${my_src}.zip
set my_bootstrap_version                    3.1.2
set my_bootstrap                            "Mini vMac.app"
set my_bootstrap_distfile                   ${name}-${my_bootstrap_version}-umch.bin.tgz
set my_clipin                               clipin-1.1.0
set my_clipin_distfile                      ${my_clipin}.zip
set my_icons                                icnsosx-1.0.0
set my_icons_distfile                       ${my_icons}.zip
set my_system_disk_container                System_7.0.1.smi
set my_system_disk_container_distfile       ${my_system_disk_container}.bin

distfiles \
    ${my_src_distfile}:minivmac \
    ${my_bootstrap_distfile}:minivmac \
    ${my_icons_distfile}:minivmac \
    ${my_clipin_distfile}:minivmac \
    ${my_system_disk_container_distfile}:apple

extract.only \
    ${my_src_distfile} \
    ${my_icons_distfile} \
    ${my_clipin_distfile}

checksums \
    ${my_src_distfile} \
        md5     ab308459e98bd5103ad8bbb7dd158eb6 \
        sha1    ff99aa72da0868a5306631f0d06ae190cbd2a03a \
        rmd160  b8f1f5269d21835ff3e9e428da12a7b6c224e60e \
    ${my_bootstrap_distfile} \
        md5     53239cda5f1827fcc00d9254ee1ee9e0 \
        sha1    d6c16c541d72241cabafcbb94eec7c198e8b1670 \
        rmd160  f3925e194c59f704f6fac391609ccc72dd12c718 \
    ${my_icons_distfile} \
        md5     2af006506de7549be14f94317918d59a \
        sha1    4ef79bb56b988fedfeb82a8b6cafd8066f5bbab2 \
        rmd160  cef6d7d7578464538d0042b0d98379ae7f18fab7 \
    ${my_clipin_distfile} \
        md5     e094de97d1c6c214a80fb74895124c3e \
        sha1    725f622ad6681c77e7f9f4a64d05ac1d6a103beb \
        rmd160  5699b56c8db62b2568c8de88b6d419180b1fb73d \
    ${my_system_disk_container_distfile} \
        md5     8a4776350b15b5a516cdf7dd18e27290 \
        sha1    d4c8b8653de9c7a9b2594dd6126ec7120e3e2e9e \
        rmd160  89fc3780c9c5d575a8da4068dc810c1f56c70211

depends_extract \
    port:macutil \
    bin:expect:expect

set my_appdir           "${applications_dir}/Mini vMac"
set romfile             vMac.ROM
set romfile_model       "Macintosh Plus or 512Ke"
set my_options_file     options.txt
set my_base_options     "-maintainer MacPorts -homepage http://www.macports.org/ -cl -eol unx -nex"
set my_target           ""
set my_machine          Plus
set my_variation_machine mac[string tolower ${my_machine}]

platform powerpc {
    set my_target mach
}

platform i386 {
    set my_target imch
}

pre-fetch {
    if { ! [file exists ${my_appdir}/${romfile}] } {
        ui_msg "**************************************************************"
        ui_msg "Mini vMac requires a ROM file from the type of machine you're"
        ui_msg "emulating in order to work. The ROM file is not included with"
        ui_msg "this package because it is copyrighted Apple software."
        ui_msg "Download the CopyRoms program from the Mini vMac web site"
        ui_msg "(${homepage} > More > Extras)"
        ui_msg "and transfer it to a real physical ${romfile_model}"
        ui_msg "that you own. Run the CopyRoms program there, then transfer"
        ui_msg "the ROM file back to this Mac, name it ${romfile},"
        ui_msg "and put it in ${my_appdir}."
        ui_msg "**************************************************************"
        return -code error "missing ROM file"
    }
}

worksrcdir              stuff
extract.mkdir           yes

post-extract {
    # Copy the scripts we need.
    xinstall -W ${filespath} attach.exp configure.applescript demacbinary.sh ${worksrcpath}
    
    # Decode the system disk container image.
    my_system "${worksrcpath}/demacbinary.sh ${distpath}/${my_system_disk_container_distfile} ${worksrcpath}"
    
    # Copy the Disk Tools image from the container image.
    set my_system_disk_container_mount [my_attach_disk_image ${worksrcpath}/${my_system_disk_container}]
    file copy "${my_system_disk_container_mount}/Disk Tools.image" "${worksrcpath}/Disk Tools.dsk"
    my_detach_disk_image ${my_system_disk_container_mount}
    
    # Use the .img extension for the source disk image so that we can mount it on Mac OS X later.
    file rename ${worksrcpath}/${my_src}/${my_src}.dsk ${worksrcpath}/${my_src}/${my_src}.img
    
    # Unrestrict the permissions on the source disk image so the Build program
    # can write its output to it.
    file attributes ${worksrcpath}/${my_src}/${my_src}.img -permissions 0777
    
    # Extract the bootstrap version of Mini vMac.
    my_system "tar -x -z -C ${worksrcpath} -f ${distpath}/${my_bootstrap_distfile}"
    
    # Make the data directory, where Mini vMac looks for the files it needs.
    set my_mnvm_dat "${worksrcpath}/${my_bootstrap}/Contents/mnvm_dat"
    file mkdir ${my_mnvm_dat}
    
    # Symlink the ROM file into the data directory.
    ln -s ${my_appdir}/${romfile} ${my_mnvm_dat}
    
    # Symlink the disk images into the data directory with sequentially-numbered
    # names so Mini vMac will find them and automatically mount them.
    ln -s "${worksrcpath}/Disk Tools.dsk" "${my_mnvm_dat}/disk1.dsk"
    ln -s ${worksrcpath}/${my_src}/${my_src}.img "${my_mnvm_dat}/disk2.dsk"
    ln -s ${worksrcpath}/${my_clipin}/${my_clipin}.dsk "${my_mnvm_dat}/disk3.dsk"
}

pre-configure {
    set my_variation [my_get_variation]
    
    # Copy the configuration options to the clipboard. The script run later
    # with osascript will paste them into the Build program.
    set my_options "${my_base_options} -t ${my_target} -m ${my_machine} -n ${my_variation}"
    my_system "echo '${my_options}' | pbcopy"
    
    # Launch Mini vMac.
    my_system "open '${worksrcpath}/${my_bootstrap}'"
}

configure.cmd           osascript
configure.pre_args      configure.applescript

post-configure {
    set my_variation [my_get_variation]
    
    # Get the configured source code.
    set my_src_disk_mount [my_attach_disk_image ${worksrcpath}/${my_src}/${my_src}.img]
    if {[file exists ${my_src_disk_mount}/output/${my_variation}]} {
        file copy ${my_src_disk_mount}/output/${my_variation} ${workpath}
    }
    my_detach_disk_image ${my_src_disk_mount}
    
    # Use the right compiler.
    reinplace "s|gcc|${configure.cc}|g" ${workpath}/${my_variation}/Makefile
    
    # Remove references to SDKs -- the 10.4u SDK is not installed by default on 10.6
    # and even if you install it manually it does not work here.
    reinplace -E {s|-isysroot /Developer/SDKs/[^ ]+||g} ${workpath}/${my_variation}/Makefile
}

pre-build {
    set my_variation [my_get_variation]
    build.dir ${workpath}/${my_variation}
}

post-build {
    set my_variation [my_get_variation]
    
    # Install the prettier icons.
    eval xinstall -m 644 [glob ${worksrcpath}/${my_icons}/icons/*.icns] ${workpath}/${my_variation}/minivmac.app/Contents/Resources
}

destroot {
    set my_variation [my_get_variation]
    xinstall -d ${destroot}${my_appdir}
    file copy ${workpath}/${my_variation}/minivmac.app \
        ${destroot}${my_appdir}/Mini\ vMac\ ${my_machine}.app
}

if { ![variant_isset mac128k] && ![variant_isset mac512k] && ![variant_isset mac512ke] && ![variant_isset macse] } {
    default_variants +macplus
}

variant mac128k conflicts mac512k mac512ke macplus macse description {Emulate a Macintosh with 128K RAM and 2 drives} {
    patchfiles-append patch-CNFGGLOB.h-mac128k.diff
    set romfile Mac128K.ROM
    set romfile_model "Macintosh 128K or 512K"
}

variant mac512k conflicts mac128k mac512ke macplus macse description {Emulate a Macintosh 512K with 512K RAM and 2 drives} {
    patchfiles-append patch-CNFGGLOB.h-mac512k.diff
    set romfile Mac128K.ROM
    set romfile_model "Macintosh 128K or 512K"
}

variant mac512ke conflicts mac128k mac512k macplus macse description {Emulate a Macintosh 512Ke with 512K RAM and 6 drives} {
    patchfiles-append patch-CNFGGLOB.h-mac512ke.diff
}

variant macplus conflicts mac128k mac512k mac512ke macse description {Emulate a Macintosh Plus with 4 MB RAM and 6 drives} {
    # Mac Plus emulation is the default so we don't need to do anything here
}

variant macse conflicts mac128k mac512k mac512ke macplus description {Emulate a Macintosh SE with 4 MB RAM and 6 drives} {
    patchfiles-append patch-CNFGGLOB.h-macse.diff
    set romfile MacSE.ROM
    set romfile_model "Macintosh SE"
}

# Mounts a disk image.
proc my_attach_disk_image {disk_image} {
    global name worksrcpath
    set mountpoint [exec mktemp -d -q -t ${name}]
    # Use this expect script instead of using hdiutil directly, because the
    # system disk image has a license agreement we must agree to.
    my_system "${worksrcpath}/attach.exp '${disk_image}' '${mountpoint}'"
    return ${mountpoint}
}

# Unmounts a disk image.
proc my_detach_disk_image {mountpoint} {
    my_system "hdiutil detach ${mountpoint} -force"
    file delete -force ${mountpoint}
}

proc my_get_variation {} {
    global name version revision my_variation_machine my_target
    return ${name}-${version}_${revision}-${my_variation_machine}-${my_target}
}

proc my_system {cmd} {
     ui_debug ${cmd}
     system ${cmd}
}

livecheck.type          regex
livecheck.url           ${homepage}download.html
livecheck.regex         ${name}-(\[0-9.\]+)\\.src
